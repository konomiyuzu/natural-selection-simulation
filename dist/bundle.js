/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Animal.js":
/*!**************************!*\
  !*** ./src/js/Animal.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Animal\": () => (/* binding */ Animal),\n/* harmony export */   \"AnimalActions\": () => (/* binding */ AnimalActions),\n/* harmony export */   \"AnimalDeathTypes\": () => (/* binding */ AnimalDeathTypes),\n/* harmony export */   \"AnimalSettings\": () => (/* binding */ AnimalSettings),\n/* harmony export */   \"AnimalTraitsClampValues\": () => (/* binding */ AnimalTraitsClampValues),\n/* harmony export */   \"EnergyCostConstants\": () => (/* binding */ EnergyCostConstants),\n/* harmony export */   \"TraitEffectConstants\": () => (/* binding */ TraitEffectConstants),\n/* harmony export */   \"baseAnimalTraits\": () => (/* binding */ baseAnimalTraits),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Food__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Food */ \"./src/js/Food.js\");\n/* harmony import */ var _lib_Random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/Random */ \"./src/js/lib/Random.js\");\n/* harmony import */ var _lib_Utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/Utility */ \"./src/js/lib/Utility.js\");\n/* harmony import */ var _lib_Vector2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/Vector2D */ \"./src/js/lib/Vector2D.js\");\n/* harmony import */ var _Simulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Simulation */ \"./src/js/Simulation.js\");\n\r\n\r\n\r\n\r\n\r\n//this class is for settings that would be editable by the user;\r\nclass AnimalSettings {\r\n    static traitEffectConstants;\r\n    static EnergyCostConstants;\r\n    static maximumAge = 3000;\r\n}\r\nconst baseAnimalTraits = {\r\n    speed: 1,\r\n    sense: 1,\r\n    reproductiveUrge: 1,\r\n    offspringInvestment: 1,\r\n};\r\nvar TraitEffectConstants;\r\n(function (TraitEffectConstants) {\r\n    TraitEffectConstants[TraitEffectConstants[\"speed\"] = 3] = \"speed\";\r\n    TraitEffectConstants[TraitEffectConstants[\"sense\"] = 50] = \"sense\";\r\n    TraitEffectConstants[TraitEffectConstants[\"reproductiveUrge\"] = 30] = \"reproductiveUrge\";\r\n    TraitEffectConstants[TraitEffectConstants[\"offsprintInvestment\"] = 50] = \"offsprintInvestment\";\r\n})(TraitEffectConstants || (TraitEffectConstants = {}));\r\nvar EnergyCostConstants;\r\n(function (EnergyCostConstants) {\r\n    EnergyCostConstants[EnergyCostConstants[\"speed\"] = 0.1] = \"speed\";\r\n    EnergyCostConstants[EnergyCostConstants[\"sense\"] = 0.1] = \"sense\";\r\n    EnergyCostConstants[EnergyCostConstants[\"baseReproductionCost\"] = 100] = \"baseReproductionCost\";\r\n})(EnergyCostConstants || (EnergyCostConstants = {}));\r\nvar AnimalActions;\r\n(function (AnimalActions) {\r\n    AnimalActions[\"searchingForFood\"] = \"searching for food\";\r\n    AnimalActions[\"movingTowardsFood\"] = \"moving towards food\";\r\n    AnimalActions[\"decidingOnAction\"] = \"deciding on action\";\r\n    AnimalActions[\"wandering\"] = \"wandering\";\r\n    AnimalActions[\"reproducing\"] = \"reproducing\";\r\n})(AnimalActions || (AnimalActions = {}));\r\nvar AnimalDeathTypes;\r\n(function (AnimalDeathTypes) {\r\n    AnimalDeathTypes[\"starvation\"] = \"starved to death\";\r\n    AnimalDeathTypes[\"oldAge\"] = \"died of old age\";\r\n})(AnimalDeathTypes || (AnimalDeathTypes = {}));\r\nconst AnimalTraitsClampValues = {\r\n    speed: { min: 0.01, max: Infinity },\r\n    sense: { min: 0.01, max: Infinity },\r\n    reproductiveUrge: { min: 0.01, max: Infinity },\r\n    offspringInvestment: { min: 0.01, max: Infinity }\r\n};\r\nclass Animal {\r\n    static radius = 10;\r\n    age = _Simulation__WEBPACK_IMPORTED_MODULE_4__.SimulationTime.zero;\r\n    alive = true;\r\n    energy;\r\n    position;\r\n    currentAction;\r\n    reasonForDeath = \"still alive\";\r\n    traits;\r\n    memory = {};\r\n    get movementEnergyCost() {\r\n        return EnergyCostConstants.speed * (1.5 ** this.traits.speed) * this.traits.speed;\r\n    }\r\n    get reproductionCost() {\r\n        return EnergyCostConstants.baseReproductionCost + (this.traits.offspringInvestment * TraitEffectConstants.offsprintInvestment);\r\n    }\r\n    get energyRequiredForReproductionAttempt() {\r\n        return this.reproductionCost + ((1 / this.traits.reproductiveUrge) * TraitEffectConstants.reproductiveUrge);\r\n    }\r\n    get energyCostPerDay() {\r\n        return (this.metabolism + this.movementEnergyCost) * 100;\r\n    }\r\n    get metabolism() {\r\n        return this.traits.sense * EnergyCostConstants.sense;\r\n    }\r\n    get moveTarget() {\r\n        return this.memory.moveTarget;\r\n    }\r\n    get targetFood() {\r\n        return this.memory.targetFood;\r\n    }\r\n    set moveTarget(moveTarget) {\r\n        this.memory.moveTarget = moveTarget;\r\n    }\r\n    set targetFood(targetFood) {\r\n        this.memory.targetFood = targetFood;\r\n    }\r\n    setMoveTarget(moveTarget) {\r\n        this.moveTarget = moveTarget;\r\n    }\r\n    setTargetFood(targetFood) {\r\n        this.targetFood = targetFood;\r\n    }\r\n    move() {\r\n        let targetVector = this.moveTarget.sub(this.position);\r\n        let speed = this.traits.speed;\r\n        let maxDistance = speed * TraitEffectConstants.speed;\r\n        let distance = targetVector.length;\r\n        let direction = targetVector.normalized;\r\n        if (distance == 0) {\r\n            this.moveTarget = null;\r\n            return;\r\n        }\r\n        if (distance > maxDistance) {\r\n            this.position = this.position.add(direction.scale(maxDistance));\r\n            this.energy -= this.movementEnergyCost;\r\n        }\r\n        else {\r\n            this.position = this.position.add(direction.scale(distance));\r\n            this.energy -= this.movementEnergyCost * (distance / maxDistance);\r\n        }\r\n    }\r\n    chooseFood(foods) {\r\n        let closestFood = null;\r\n        let closestDistance = Infinity;\r\n        for (let food of foods) {\r\n            if (food.eaten)\r\n                continue;\r\n            let distance = _lib_Vector2D__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDistance(this.position, food.position);\r\n            if (distance < closestDistance) {\r\n                closestFood = food;\r\n                closestDistance = distance;\r\n            }\r\n        }\r\n        return closestFood;\r\n    }\r\n    /**chooseMate(mates: Animal[]): Animal | null{\r\n        if(mates.length == 0) return null;\r\n\r\n        let closestMate: Animal = null;\r\n        let closestDistance = Infinity;\r\n\r\n        for (let mate of mates) {\r\n            let distance = Vector2D.getDistance(this.position, mate.position);\r\n            if (distance < closestDistance) {\r\n                closestMate = mate;\r\n                closestDistance = distance;\r\n            }\r\n        }\r\n\r\n        return closestMate;\r\n    }*/\r\n    searchForFood() {\r\n        let visibleFood = this.getVisibleFood();\r\n        if (visibleFood.length == 0)\r\n            this.wander();\r\n        else {\r\n            this.currentAction = AnimalActions.movingTowardsFood;\r\n            this.targetFood = this.chooseFood(visibleFood);\r\n            if (this.targetFood == null) {\r\n                this.currentAction = AnimalActions.decidingOnAction;\r\n                return;\r\n            }\r\n            this.moveTarget = this.targetFood.position;\r\n        }\r\n    }\r\n    moveTowardsFood() {\r\n        if (this.targetFood.eaten) {\r\n            this.currentAction = AnimalActions.decidingOnAction;\r\n        }\r\n        else {\r\n            if (_lib_Vector2D__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDistance(this.position, this.memory.targetFood.position) <= Animal.radius + _Food__WEBPACK_IMPORTED_MODULE_0__[\"default\"].radius) {\r\n                this.eat(this.memory.targetFood);\r\n                this.currentAction = AnimalActions.decidingOnAction;\r\n            }\r\n            this.move();\r\n        }\r\n    }\r\n    decideOnAction() {\r\n        this.currentAction = AnimalActions.searchingForFood;\r\n    }\r\n    reproduce() {\r\n        this.energy -= this.reproductionCost;\r\n        _Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].animals.push(this.createOffspring());\r\n    }\r\n    /**searchForMate():void{\r\n        if(this.energy <= this.energyCostForMating) {\r\n            this.currentAction = AnimalActions.decidingOnAction;\r\n            \r\n            return;\r\n        }\r\n        \r\n        let mates = this.getVisibleAnimals().filter(mate => (mate.gender == this.oppositeGender && mate.currentAction == AnimalActions.searchingForMate));\r\n\r\n        if(mates.length == 0){\r\n            this.wander()\r\n        }\r\n        else {\r\n            let mate = this.chooseMate(mates);\r\n            \r\n            if(mate == null){\r\n                this.wander()\r\n                return\r\n            }\r\n\r\n            this.currentAction = AnimalActions.mating;\r\n            mate.currentAction = AnimalActions.mating;\r\n\r\n            this.targetMate = mate;\r\n            mate.targetMate = this;\r\n        }\r\n    }*/\r\n    /**\r\n    mate():void{\r\n        if(!this.targetMate.alive) this.currentAction = AnimalActions.decidingOnAction;\r\n\r\n        if(this.energy <= this.energyCostForMating){\r\n            this.currentAction = AnimalActions.decidingOnAction;\r\n            this.targetMate.currentAction = AnimalActions.decidingOnAction;\r\n        }\r\n        if (Vector2D.getDistance(this.position, this.targetMate.position) <= Animal.radius*2) {\r\n            let mate = this.targetMate;\r\n\r\n            this.energy -= this.energyCostForMating;\r\n            mate.energy -= mate.energyCostForMating;\r\n\r\n            Simulation.animals.push(this.createOffspring(mate));\r\n            this.currentAction = AnimalActions.decidingOnAction;\r\n            mate.currentAction = AnimalActions.decidingOnAction;\r\n        } else{\r\n            if(this.moveTarget != this.targetMate.position) this.moveTarget = this.targetMate.position;\r\n            this.move()\r\n        }\r\n    }\r\n    */\r\n    createOffspring() {\r\n        let position = this.position;\r\n        let traits = {};\r\n        for (let trait in this.traits) {\r\n            let traitValue = this.traits[trait];\r\n            let serverity = _Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].settings.mutationSeverity * traitValue;\r\n            if (_lib_Random__WEBPACK_IMPORTED_MODULE_1__[\"default\"].randomChance(_Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].settings.mutationChance))\r\n                traitValue += _lib_Random__WEBPACK_IMPORTED_MODULE_1__[\"default\"].randomFloat(-serverity, serverity);\r\n            traits[trait] = _lib_Utility__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clamp(traitValue, AnimalTraitsClampValues[trait].min, AnimalTraitsClampValues[trait].max);\r\n        }\r\n        return new Animal(position, this.traits.offspringInvestment * TraitEffectConstants.offsprintInvestment, traits);\r\n    }\r\n    update() {\r\n        if (!this.alive)\r\n            throw new Error(\"tried to update a dead animal\");\r\n        if (this.currentAction == AnimalActions.decidingOnAction)\r\n            this.decideOnAction();\r\n        switch (this.currentAction) {\r\n            case AnimalActions.searchingForFood:\r\n                this.searchForFood();\r\n                break;\r\n            case AnimalActions.movingTowardsFood:\r\n                this.moveTowardsFood();\r\n                break;\r\n            case AnimalActions.wandering:\r\n                this.wander();\r\n                break;\r\n        }\r\n        this.age.tick();\r\n        if (this.energy >= this.energyRequiredForReproductionAttempt)\r\n            this.reproduce();\r\n        this.energy -= this.metabolism;\r\n        if (this.energy <= 0)\r\n            this.die(AnimalDeathTypes.starvation);\r\n    }\r\n    die(deathClause) {\r\n        this.alive = false;\r\n        this.reasonForDeath = deathClause;\r\n    }\r\n    wander() {\r\n        if (_lib_Random__WEBPACK_IMPORTED_MODULE_1__[\"default\"].randomChance(.01) || this.moveTarget == null)\r\n            this.moveTarget = _Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getRandomPositionInWorld();\r\n        this.move();\r\n    }\r\n    eat(food) {\r\n        food.eaten = true;\r\n        this.energy += food.energy;\r\n    }\r\n    getVisibleFood(foods = _Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].foods) {\r\n        let visibleFood = [];\r\n        for (let food of foods) {\r\n            if (_lib_Vector2D__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDistance(this.position, food.position) <= TraitEffectConstants.sense * this.traits.sense)\r\n                visibleFood.push(food);\r\n        }\r\n        return visibleFood;\r\n    }\r\n    getVisibleAnimals(animals = _Simulation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].animals) {\r\n        let visibleAnimals = [];\r\n        for (let animal of animals) {\r\n            if (_lib_Vector2D__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDistance(this.position, animal.position) <= TraitEffectConstants.sense * this.traits.sense)\r\n                visibleAnimals.push(animal);\r\n        }\r\n        return visibleAnimals;\r\n    }\r\n    constructor(position, startingEnergy, traits) {\r\n        this.position = position;\r\n        this.energy = startingEnergy;\r\n        this.traits = traits;\r\n        this.currentAction = AnimalActions.decidingOnAction;\r\n        this.age.schedule((() => { this.die(AnimalDeathTypes.oldAge); }).bind(this), AnimalSettings.maximumAge);\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Animal);\r\n\n\n//# sourceURL=webpack:///./src/js/Animal.js?");

/***/ }),

/***/ "./src/js/Camera.js":
/*!**************************!*\
  !*** ./src/js/Camera.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_Canvas2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/Canvas2D */ \"./src/js/lib/Canvas2D.js\");\n/* harmony import */ var _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/Vector2D */ \"./src/js/lib/Vector2D.js\");\n/* harmony import */ var _Simulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Simulation */ \"./src/js/Simulation.js\");\n/* harmony import */ var _lib_Utility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/Utility */ \"./src/js/lib/Utility.js\");\n/* harmony import */ var _KeyboardInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./KeyboardInput */ \"./src/js/KeyboardInput.js\");\n/* harmony import */ var _Food__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Food */ \"./src/js/Food.js\");\n/* harmony import */ var _Animal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Animal */ \"./src/js/Animal.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    static position = _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"].zero;\r\n    static canvas2D;\r\n    static rendering = true;\r\n    static renderingFood = true;\r\n    static renderingAnimals = true;\r\n    static renderingBackground = true;\r\n    static zoom = 1;\r\n    static cameraSpeed = 5;\r\n    static lastMouseData = {};\r\n    static initialized = false;\r\n    static init(canvas, targetFPS = 60) {\r\n        this.canvas2D = new _lib_Canvas2D__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas);\r\n        setInterval(this.update.bind(this), 1000 / targetFPS);\r\n        window.addEventListener(\"resize\", () => {\r\n            this.canvas2D.updateDimensions();\r\n        });\r\n        window.addEventListener(\"wheel\", this.handleScroll.bind(this));\r\n        window.addEventListener(\"mousemove\", this.handleMouseDrag.bind(this));\r\n        window.addEventListener(\"mouseup\", () => {\r\n            this.lastMouseData = {};\r\n        });\r\n    }\r\n    static mouseCoordinatesToWorldCoordinates(mouseCoordinates) {\r\n        let bounding = this.canvas2D.canvas.getBoundingClientRect();\r\n        let offsetVector = new _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](bounding.left, bounding.top);\r\n        //convert screen coordinates into canvas coordinates\r\n        let projectedCoordinates = mouseCoordinates.sub(offsetVector);\r\n        projectedCoordinates = this.canvas2D.canvasCoordinatesToVectorCoordinates(projectedCoordinates);\r\n        return this.reverseProject(projectedCoordinates);\r\n    }\r\n    static handleScroll(e) {\r\n        let zoomChange = _KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.shift ? (-e.deltaY / 2000) * 5 : -e.deltaY / 2000;\r\n        this.zoom += zoomChange * this.zoom;\r\n        this.zoom = _lib_Utility__WEBPACK_IMPORTED_MODULE_3__[\"default\"].clamp(this.zoom, 0.1, 10);\r\n    }\r\n    static handleMouseDrag(e) {\r\n        if (e.target != this.canvas2D.canvas || e.buttons == 0)\r\n            return;\r\n        e.preventDefault();\r\n        if (this.lastMouseData.x == null || this.lastMouseData.y == null) {\r\n            this.lastMouseData.x = e.x;\r\n            this.lastMouseData.y = e.y;\r\n        }\r\n        else {\r\n            let dx = e.x - this.lastMouseData.x;\r\n            let dy = e.y - this.lastMouseData.y;\r\n            this.position.x -= dx / this.zoom;\r\n            this.position.y += dy / this.zoom;\r\n            this.lastMouseData.x = e.x;\r\n            this.lastMouseData.y = e.y;\r\n        }\r\n    }\r\n    static changeZoom(newZoom) {\r\n        this.zoom = newZoom;\r\n    }\r\n    static changeSpeed(newSpeed) {\r\n        this.cameraSpeed = newSpeed;\r\n    }\r\n    static update() {\r\n        let speed = _KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.shift ? this.cameraSpeed * 3 : this.cameraSpeed;\r\n        speed /= this.zoom;\r\n        if (_KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.w) {\r\n            this.position.y += speed;\r\n        }\r\n        if (_KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.s) {\r\n            this.position.y -= speed;\r\n        }\r\n        if (_KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.a) {\r\n            this.position.x -= speed;\r\n        }\r\n        if (_KeyboardInput__WEBPACK_IMPORTED_MODULE_4__[\"default\"].keys.d) {\r\n            this.position.x += speed;\r\n        }\r\n        this.render();\r\n    }\r\n    /**\r\n    \r\n    static queueBorders(){\r\n        let x = Simulation.settings.worldSize.x/2;\r\n        let y = Simulation.settings.worldSize.y/2;\r\n\r\n        let topRight = this.project(new Vector2D(-x,y));\r\n        let bottomLeft = this.project(new Vector2D(x,-y));\r\n\r\n        this.canvas2D.queueRectangle(new Vector2D(-this.canvas2D.width/2,this.canvas2D.height/2),new Vector2D(this.canvas2D.width,(this.canvas2D.height/2) - topRight.y - 10),10,\"black\")\r\n        this.canvas2D.queueRectangle(new Vector2D(-this.canvas2D.width/2,bottomLeft.y),new Vector2D(this.canvas2D.width,bottomLeft.y - 10 - (-this.canvas2D.height/2)),10,\"black\")\r\n    }\r\n     */\r\n    static queueBackground() {\r\n        let position = this.project(_lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"].zero);\r\n        this.canvas2D.queueCircle(position, _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].settings.worldRadius * this.zoom, -10, \"#00FF0020\");\r\n    }\r\n    static queueFoods() {\r\n        for (let food of _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].foods) {\r\n            let position = this.project(food.position);\r\n            if (Math.abs(position.x) - _Food__WEBPACK_IMPORTED_MODULE_5__[\"default\"].radius > this.canvas2D.width || Math.abs(position.y) - _Food__WEBPACK_IMPORTED_MODULE_5__[\"default\"].radius > this.canvas2D.height)\r\n                continue;\r\n            this.canvas2D.queueCircle(new _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.round(position.x), Math.round(position.y)), _Food__WEBPACK_IMPORTED_MODULE_5__[\"default\"].radius * this.zoom, 0, \"lime\");\r\n        }\r\n    }\r\n    static queueAnimals() {\r\n        for (let animal of _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].animals) {\r\n            let position = this.project(animal.position);\r\n            if (Math.abs(position.x) - _Animal__WEBPACK_IMPORTED_MODULE_6__[\"default\"].radius > this.canvas2D.width || Math.abs(position.y) - _Animal__WEBPACK_IMPORTED_MODULE_6__[\"default\"].radius > this.canvas2D.height)\r\n                continue;\r\n            this.canvas2D.queueCircle(new _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.round(position.x), Math.round(position.y)), _Animal__WEBPACK_IMPORTED_MODULE_6__[\"default\"].radius * this.zoom, 0, \"grey\");\r\n        }\r\n    }\r\n    static render() {\r\n        if (!this.rendering)\r\n            return;\r\n        if (this.renderingFood)\r\n            this.queueFoods();\r\n        if (this.renderingAnimals)\r\n            this.queueAnimals();\r\n        if (this.renderingBackground)\r\n            this.queueBackground();\r\n        this.canvas2D.clear();\r\n        this.canvas2D.draw();\r\n    }\r\n    static project(coordinates) {\r\n        return coordinates.sub(this.position).scale(this.zoom);\r\n    }\r\n    static reverseProject(coordinates) {\r\n        return coordinates.scale(1 / this.zoom).add(this.position);\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Camera);\r\n\n\n//# sourceURL=webpack:///./src/js/Camera.js?");

/***/ }),

/***/ "./src/js/Food.js":
/*!************************!*\
  !*** ./src/js/Food.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Food {\r\n    static radius = 1;\r\n    position;\r\n    energy;\r\n    eaten = false;\r\n    constructor(position, energy) {\r\n        this.position = position;\r\n        this.energy = energy;\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Food);\r\n\n\n//# sourceURL=webpack:///./src/js/Food.js?");

/***/ }),

/***/ "./src/js/KeyboardInput.js":
/*!*********************************!*\
  !*** ./src/js/KeyboardInput.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass KeyboardInput {\r\n    static allowedKeys = [\"w\", \"a\", \"s\", \"d\", \"shift\"];\r\n    static #keys = {};\r\n    static initialized = false;\r\n    static get keys() {\r\n        if (!this.initialized)\r\n            this.init();\r\n        return this.#keys;\r\n    }\r\n    static init() {\r\n        if (this.initialized)\r\n            throw new Error(\"Input already initialized\");\r\n        for (let key of this.allowedKeys) {\r\n            this.#keys[key] = false;\r\n        }\r\n        document.addEventListener(\"keydown\", (e) => {\r\n            let key = e.key.toLowerCase();\r\n            if (this.allowedKeys.includes(key)) {\r\n                this.keys[key] = true;\r\n            }\r\n        });\r\n        document.addEventListener(\"keyup\", (e) => {\r\n            let key = e.key.toLowerCase();\r\n            if (this.allowedKeys.includes(key)) {\r\n                this.keys[key] = false;\r\n            }\r\n        });\r\n        this.initialized = true;\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KeyboardInput);\r\n\n\n//# sourceURL=webpack:///./src/js/KeyboardInput.js?");

/***/ }),

/***/ "./src/js/Simulation.js":
/*!******************************!*\
  !*** ./src/js/Simulation.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimulationDataCollector\": () => (/* binding */ SimulationDataCollector),\n/* harmony export */   \"SimulationTime\": () => (/* binding */ SimulationTime),\n/* harmony export */   \"SimulationTimeSchedule\": () => (/* binding */ SimulationTimeSchedule),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Animal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Animal */ \"./src/js/Animal.js\");\n/* harmony import */ var _Food__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Food */ \"./src/js/Food.js\");\n/* harmony import */ var _lib_Vector2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/Vector2D */ \"./src/js/lib/Vector2D.js\");\n\r\n\r\n\r\nclass SimulationDataCollector {\r\n    static data = [];\r\n    static collectData() {\r\n        let data = {};\r\n        data.time = new SimulationTime(Simulation.simulationTime.totalTicks);\r\n        data.averageTraits = Simulation.averageAnimalTraits;\r\n        data.populationSize = Simulation.populationSize;\r\n        data.simulationSettings = Object.assign({}, Simulation.settings);\r\n        this.data.push(data);\r\n        return data;\r\n    }\r\n    static downloadData() {\r\n        const dataURL = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.data));\r\n        let element = document.createElement(\"a\");\r\n        element.setAttribute(\"href\", dataURL);\r\n        element.setAttribute(\"download\", \"data.json\");\r\n        element.style.display = \"none\";\r\n        document.body.append(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n}\r\nclass SimulationTimeSchedule {\r\n    id;\r\n    totalTicksSinceLastRan = 0;\r\n    timesRan = 0;\r\n    single;\r\n    scheduleInterval;\r\n    callbackfn;\r\n    constructor(callbackfn, scheduleInterval, id, single) {\r\n        this.callbackfn = callbackfn;\r\n        this.id = id;\r\n        this.scheduleInterval = scheduleInterval;\r\n        this.single = single;\r\n    }\r\n    tick() {\r\n        this.totalTicksSinceLastRan++;\r\n        if (this.totalTicksSinceLastRan == this.scheduleInterval) {\r\n            this.callbackfn();\r\n            this.totalTicksSinceLastRan = 0;\r\n            this.timesRan++;\r\n        }\r\n    }\r\n}\r\nclass SimulationTime {\r\n    ticks;\r\n    cycles;\r\n    scheduled = [];\r\n    get totalTicks() {\r\n        return this.ticks + (100 * this.cycles);\r\n    }\r\n    static get zero() {\r\n        return new SimulationTime(0, 0);\r\n    }\r\n    constructor(ticks, cycle) {\r\n        if (cycle != null) {\r\n            if (ticks > 100 || ticks < 0)\r\n                throw new Error(\"ticks in invalid range\");\r\n            this.ticks = ticks;\r\n            this.cycles = cycle;\r\n        }\r\n        else {\r\n            this.ticks = ticks % 100;\r\n            this.cycles = Math.floor(ticks / 100);\r\n        }\r\n    }\r\n    tick() {\r\n        this.ticks++;\r\n        if (this.ticks == 100) {\r\n            this.ticks = 0;\r\n            this.cycles++;\r\n        }\r\n        for (let schedule of this.scheduled) {\r\n            if (schedule == null)\r\n                continue;\r\n            schedule.tick();\r\n            if (schedule.single && schedule.timesRan >= 1)\r\n                this.clearSchedule(schedule.id);\r\n        }\r\n    }\r\n    reset() {\r\n        this.ticks = 0;\r\n        this.cycles = 0;\r\n    }\r\n    /**\r\n     *\r\n     * @param callbackfn\r\n     * @param interval the interval in totalTicks inbetween each callback\r\n     */\r\n    scheduleRepeating(callbackfn, interval) {\r\n        let id = this.getNewValidScheduleId();\r\n        this.scheduled[id] = new SimulationTimeSchedule(callbackfn, interval, id, false);\r\n        return id;\r\n    }\r\n    schedule(callbackfn, timeout) {\r\n        let id = this.getNewValidScheduleId();\r\n        this.scheduled[id] = new SimulationTimeSchedule(callbackfn, timeout, id, true);\r\n        return id;\r\n    }\r\n    /**\r\n     *\r\n     * @returns a new valid id for adding to the scheduled array\r\n     */\r\n    getNewValidScheduleId() {\r\n        let id;\r\n        //search for an empty spot left behind by clearSchedule\r\n        //before adding a new spot entirely\r\n        for (let i = 0; i < this.scheduled.length; i++) {\r\n            const schedule = this.scheduled[i];\r\n            if (schedule == null) {\r\n                id = i;\r\n                break;\r\n            }\r\n        }\r\n        if (id == null)\r\n            id = this.scheduled.length; //basically push if there are not empty spots\r\n        return id;\r\n    }\r\n    clearSchedule(id) {\r\n        for (let i = 0; i < this.scheduled.length; i++) {\r\n            const schedule = this.scheduled[i];\r\n            if (schedule.id == id) {\r\n                this.scheduled[i] = null;\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(`no schedule with id ${id} found`);\r\n    }\r\n    clearAllSchedules() {\r\n        this.scheduled = [];\r\n    }\r\n}\r\nclass Simulation {\r\n    static animals = [];\r\n    static foods = [];\r\n    static simulationTime = new SimulationTime(0, 0);\r\n    static targetTPS = 60;\r\n    static lastTickTime;\r\n    static interval;\r\n    static tps;\r\n    static lastTenTPS = [];\r\n    static settings = {\r\n        initialPopulation: 20,\r\n        worldRadius: 350,\r\n        mutationChance: 1,\r\n        mutationSeverity: .1,\r\n        foodPerCycle: 300,\r\n        maximumFood: 3000,\r\n        collectData: true,\r\n        dataCollectionFrequency: 25\r\n    };\r\n    static get foodCount() {\r\n        return this.foods.length;\r\n    }\r\n    static get populationSize() {\r\n        return this.animals.length;\r\n    }\r\n    static get data() {\r\n        return SimulationDataCollector.data;\r\n    }\r\n    static get averageAnimalTraits() {\r\n        let output = {};\r\n        for (let trait in _Animal__WEBPACK_IMPORTED_MODULE_0__.baseAnimalTraits) {\r\n            let average = this.animals.map(animal => animal.traits[trait]) //array of trait values\r\n                .reduce((a, b) => a + b, 0) / this.animals.length; //summed then divided by length (averaged)\r\n            output[trait] = average;\r\n        }\r\n        return output;\r\n    }\r\n    //average of almost everything because why not\r\n    static get averageAnimal() {\r\n        let averagePosition = this.animals.map(animal => animal.position)\r\n            .reduce((a, b) => a.add(b), _lib_Vector2D__WEBPACK_IMPORTED_MODULE_2__[\"default\"].zero).scale(1 / this.animals.length);\r\n        let averageEnergy = this.animals.map(animal => animal.energy)\r\n            .reduce((a, b) => a + b, 0) / this.animals.length;\r\n        let averageAge = this.animals.map(animal => animal.age.totalTicks)\r\n            .reduce((a, b) => a + b, 0) / this.animals.length;\r\n        let averageAnimal = new _Animal__WEBPACK_IMPORTED_MODULE_0__[\"default\"](averagePosition, averageEnergy, this.averageAnimalTraits);\r\n        averageAnimal.age = new SimulationTime(Math.round(averageAge));\r\n        return averageAnimal;\r\n    }\r\n    static setUpSimulation() {\r\n        this.reset();\r\n        this.addAnimal(this.settings.initialPopulation);\r\n        this.simulationTime.scheduleRepeating(this.nextCycle.bind(this), 100);\r\n        if (this.settings.collectData)\r\n            this.simulationTime.scheduleRepeating(SimulationDataCollector.collectData.bind(SimulationDataCollector), this.settings.dataCollectionFrequency);\r\n        this.addFood(this.settings.foodPerCycle);\r\n        if (!this.simulating)\r\n            this.continueSimulation();\r\n        this.simulationTime.schedule(() => {\r\n            alert(\"disaster time\");\r\n            Simulation.simulationTime.scheduleRepeating(() => {\r\n                Simulation.settings.foodPerCycle = Math.max(Simulation.settings.foodPerCycle - 1, 30);\r\n            }, 100);\r\n        }, 30000);\r\n    }\r\n    static reset() {\r\n        this.animals = [];\r\n        this.foods = [];\r\n        this.simulationTime.reset();\r\n        this.simulationTime.clearAllSchedules();\r\n    }\r\n    static get averageTPS() {\r\n        return this.lastTenTPS.reduce((a, b) => a + b, 0) / this.lastTenTPS.length;\r\n    }\r\n    static get simulating() {\r\n        return this.interval != null;\r\n    }\r\n    static changeSettings(settings) {\r\n        Object.assign(this.settings, settings);\r\n    }\r\n    static changeTargetTPS(targetTPS) {\r\n        this.pauseSimulation();\r\n        this.targetTPS = targetTPS;\r\n        this.continueSimulation();\r\n    }\r\n    static getRandomPositionInWorld() {\r\n        const radius = Math.sqrt(Math.random()) * this.settings.worldRadius;\r\n        const theta = 2 * Math.random() * Math.PI;\r\n        return new _lib_Vector2D__WEBPACK_IMPORTED_MODULE_2__[\"default\"](radius * Math.cos(theta), radius * Math.sin(theta));\r\n    }\r\n    static addFood(amount) {\r\n        for (let i = 0; i < amount; i++) {\r\n            let food = new _Food__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.getRandomPositionInWorld(), 20);\r\n            this.foods.push(food);\r\n            if (this.foods.length >= this.settings.maximumFood)\r\n                break;\r\n        }\r\n    }\r\n    static addAnimal(amount) {\r\n        for (let i = 0; i < amount; i++) {\r\n            let animal = new _Animal__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.getRandomPositionInWorld(), 100, _Animal__WEBPACK_IMPORTED_MODULE_0__.baseAnimalTraits);\r\n            this.animals.push(animal);\r\n        }\r\n    }\r\n    static tick() {\r\n        for (let animal of this.animals) {\r\n            animal.update();\r\n        }\r\n        this.foods = this.foods.filter(food => food.eaten == false);\r\n        this.animals = this.animals.filter(animal => animal.alive);\r\n        if (this.lastTickTime != null) {\r\n            let deltaTime = 1000 / (Date.now() - this.lastTickTime);\r\n            if (!isFinite(deltaTime))\r\n                deltaTime = 1000 / this.targetTPS;\r\n            this.tps = deltaTime;\r\n            this.lastTenTPS.push(this.tps);\r\n            if (this.lastTenTPS.length >= 11)\r\n                this.lastTenTPS.shift();\r\n        }\r\n        this.simulationTime.tick();\r\n        this.lastTickTime = Date.now();\r\n        if (this.animals.length == 0) {\r\n            alert(\"extinction 💀\");\r\n            this.pauseSimulation();\r\n        }\r\n    }\r\n    static pauseSimulation() {\r\n        if (!this.simulating)\r\n            throw new Error(\"tried to pause the simulation, but the simulation is already paused\");\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n    static continueSimulation() {\r\n        if (this.simulating)\r\n            throw new Error(\"tried to continue the simulation, but the simulation is already running\");\r\n        this.interval = setInterval(this.tick.bind(this), 1000 / this.targetTPS);\r\n    }\r\n    static nextCycle() {\r\n        this.addFood(this.settings.foodPerCycle);\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Simulation);\r\n\n\n//# sourceURL=webpack:///./src/js/Simulation.js?");

/***/ }),

/***/ "./src/js/lib/Canvas2D.js":
/*!********************************!*\
  !*** ./src/js/lib/Canvas2D.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Canvas2DCircleEntry\": () => (/* binding */ Canvas2DCircleEntry),\n/* harmony export */   \"Canvas2DLineEntry\": () => (/* binding */ Canvas2DLineEntry),\n/* harmony export */   \"Canvas2DPolygonEntry\": () => (/* binding */ Canvas2DPolygonEntry),\n/* harmony export */   \"Canvas2DRectangleEntry\": () => (/* binding */ Canvas2DRectangleEntry),\n/* harmony export */   \"default\": () => (/* binding */ Canvas2D)\n/* harmony export */ });\n/* harmony import */ var _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector2D.js */ \"./src/js/lib/Vector2D.js\");\n\r\nclass Canvas2DRectangleEntry {\r\n    zIndex;\r\n    args;\r\n    /**\r\n     * @param {Vector2D} position should be in canvas coordinates\r\n     * @param {Vector2D} dimensions a vector2D representing the width and height of the rectangle\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     */\r\n    constructor(position, dimensions, zIndex = 0, color = \"#FFFFFF\") {\r\n        this.zIndex = zIndex;\r\n        this.args = {\r\n            position: position,\r\n            dimensions: dimensions,\r\n            color: color\r\n        };\r\n    }\r\n    draw(context) {\r\n        context.fillStyle = this.args.color;\r\n        context.fillRect(this.args.position.x, this.args.position.y, this.args.dimensions.x, this.args.dimensions.y);\r\n    }\r\n}\r\nclass Canvas2DCircleEntry {\r\n    zIndex;\r\n    args;\r\n    /**\r\n     * @param {Vector2D} position should be in canvas coordinates\r\n     * @param {number} radius a number representing the radius of the circle\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     */\r\n    constructor(position, radius, zIndex = 0, color = \"#FFFFFF\") {\r\n        this.zIndex = zIndex;\r\n        this.args = {\r\n            position: position,\r\n            radius: radius,\r\n            color: color\r\n        };\r\n    }\r\n    draw(context) {\r\n        context.fillStyle = this.args.color;\r\n        context.strokeStyle = this.args.color;\r\n        context.beginPath();\r\n        context.arc(this.args.position.x, this.args.position.y, this.args.radius, 0, 2 * Math.PI);\r\n        context.fill();\r\n        context.stroke();\r\n    }\r\n}\r\nclass Canvas2DLineEntry {\r\n    zIndex;\r\n    args;\r\n    /**\r\n     *\r\n     * @param {Vector2D} pointA a Vector2D representing the line's starting point in canvas coordinates\r\n     * @param {Vector2D} pointB a Vector2D representing the line's ending point in canvas coordinates\r\n     * @param {number} lineSize a number representing the line's stroke width\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     */\r\n    constructor(pointA, pointB, lineSize = 1, zIndex = 0, color = \"#FFFFFF\") {\r\n        this.zIndex = zIndex;\r\n        this.args = {\r\n            pointA: pointA,\r\n            pointB: pointB,\r\n            lineSize: lineSize,\r\n            color: color\r\n        };\r\n    }\r\n    draw(context) {\r\n        context.strokeStyle = this.args.color;\r\n        context.lineWidth = this.args.lineSize;\r\n        context.beginPath();\r\n        context.moveTo(this.args.pointA.x, this.args.pointA.y);\r\n        context.lineTo(this.args.pointB.x, this.args.pointB.y);\r\n        context.stroke();\r\n    }\r\n}\r\nclass Canvas2DPolygonEntry {\r\n    zIndex;\r\n    args;\r\n    /**\r\n     *\r\n     * @param {Vector2D[]} points an array of Vector2Ds representing the vertices in the polygon, should be in canvas coordinates\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     */\r\n    constructor(points, zIndex = 0, color = \"#FFFFFF\") {\r\n        this.zIndex = zIndex;\r\n        this.args = {\r\n            points: points,\r\n            color: color\r\n        };\r\n    }\r\n    draw(context) {\r\n        context.fillStyle = this.args.color;\r\n        context.beginPath();\r\n        context.moveTo(this.args.points[0].x, this.args.points[0].y);\r\n        for (let i = 0; i < this.args.points.length; i++) {\r\n            let point = this.args.points[(i + 1) % this.args.points.length];\r\n            context.lineTo(point.x, point.y);\r\n        }\r\n        context.closePath();\r\n        context.fill();\r\n    }\r\n}\r\nclass Canvas2D {\r\n    canvas;\r\n    drawQueue = [];\r\n    /**\r\n     *\r\n     * @param {HTMLCanvasElement} canvas the html canvas element\r\n     * @description initializes the Canvas2D class, should be ran before any other functions in this class\r\n     */\r\n    constructor(canvas) {\r\n        if (canvas == null)\r\n            throw new Error(\"Canvas cannot be null\");\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        this.canvas = canvas;\r\n    }\r\n    updateDimensions() {\r\n        this.canvas.width = this.canvas.offsetWidth;\r\n        this.canvas.height = this.canvas.offsetHeight;\r\n    }\r\n    /**\r\n     *\r\n     * @param {Canvas2DEntry} Canvas2DEntry the entry to be added\r\n     * @description adds a draw queue entry into the draw queue using binaray search to insert the object into the correct index accounting for\r\n     * z indexes, objects inserted with the same zIndex are sorted according to when they were inserted, with the last inserted being on top and the first\r\n     * inserted being in the bottom\r\n     */\r\n    addToDrawQueue(Canvas2DEntry) {\r\n        const arr = this.drawQueue.map(queueEntry => queueEntry.zIndex);\r\n        const value = Canvas2DEntry.zIndex;\r\n        let index;\r\n        let start = 0;\r\n        let end = arr.length - 1;\r\n        //hard coded shortcuts for edge cases\r\n        if (arr.length == 0 || arr[start] > value)\r\n            index = 0;\r\n        if (arr[end] <= value)\r\n            index = end + 1;\r\n        while (index == null) {\r\n            let middle = Math.floor((start + end) / 2);\r\n            if (arr[middle] <= value)\r\n                start = middle + 1;\r\n            else if (arr[middle] > value)\r\n                end = middle - 1;\r\n            //meaning the comparison array is now [a,b] or [a]\r\n            if (end - start <= 1) {\r\n                if (value < arr[start])\r\n                    index = start; //this will insert before start since thats how splice works [c,a,b]\r\n                else if (value >= arr[end])\r\n                    index = end + 1; //this will insert after end [a,b,c]\r\n                else\r\n                    index = start + 1; //same here but with start instead [a,c,b]\r\n                break;\r\n            }\r\n        }\r\n        this.drawQueue.splice(index, 0, Canvas2DEntry);\r\n    }\r\n    //all methods should eventually get one of these, then the initialization Error will be thrown\r\n    get context() {\r\n        return this.canvas.getContext(\"2d\");\r\n    }\r\n    get width() {\r\n        return this.canvas.width;\r\n    }\r\n    get height() {\r\n        return this.canvas.height;\r\n    }\r\n    /**\r\n     * @description draws everything in the draw queue in order (ordered by zIndex)\r\n     * also clears the drawQueue for next frame (but does not clear the screen)\r\n     */\r\n    draw() {\r\n        for (let i = 0; i < this.drawQueue.length; i++) {\r\n            this.drawQueue[i].draw(this.context);\r\n        }\r\n        this.drawQueue = [];\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the position of the point\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color css color string\r\n     * @description adds a point (1*1 square) to the draw queue\r\n     */\r\n    queuePoint(position, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DRectangleEntry(this.vectorCoordinatesToCanvasCoordinates(position), new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 1), zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the top right corner of the rectangle\r\n     * @param {Vector2D} dimensions a vector2D with the x and y coordinates representing the width and height respectively\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     * @description adds a rectangle to the draw queue\r\n     */\r\n    queueRectangle(position, dimensions, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DRectangleEntry(this.vectorCoordinatesToCanvasCoordinates(position), dimensions, zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the center of the rectangle\r\n     * @param {Vector2D} dimensions a vector2D with the x and y coordinates representing the width and height respectively\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     * @description adds a centered rectangle to the draw queue\r\n     */\r\n    queueCenteredRectangle(position, dimensions, zIndex = 0, color = \"#FFFFFF\") {\r\n        const centeredPosition = new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](position.x - (dimensions.x / 2), position.y + (dimensions.y / 2));\r\n        const entry = new Canvas2DRectangleEntry(this.vectorCoordinatesToCanvasCoordinates(centeredPosition), dimensions, zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the top right corner of the square\r\n     * @param {number} size a number representing the size of the square\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     * @description adds a square to the draw queue\r\n     */\r\n    queueSquare(position, size, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DRectangleEntry(this.vectorCoordinatesToCanvasCoordinates(position), new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](size, size), zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the center of the square\r\n     * @param {number} size a number representing the size of the square\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     * @description adds a centered square to the draw queue\r\n     */\r\n    queueCenteredSquare(position, size, zIndex = 0, color = \"#FFFFFF\") {\r\n        const centeredPosition = new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](position.x - (size / 2), position.y + (size / 2));\r\n        const entry = new Canvas2DRectangleEntry(this.vectorCoordinatesToCanvasCoordinates(centeredPosition), new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](size, size), zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} position vector coordinates representing the center of the cirlce\r\n     * @param {number} radius a number representing the radius of the circle\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     * @description adds a circle to the draw queue\r\n     */\r\n    queueCircle(position, radius, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DCircleEntry(this.vectorCoordinatesToCanvasCoordinates(position), radius, zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} pointA vector coordinates representing the starting point of the line\r\n     * @param {Vector2D} pointB vector coordinates representing the ending point of the line\r\n     * @param {number} lineSize a number representing the line's stroke width\r\n     * @param {number} zIndex a number representing the zIndex\r\n     * @param {string} color a css color string\r\n     */\r\n    queueLine(pointA, pointB, lineSize = 1, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DLineEntry(this.vectorCoordinatesToCanvasCoordinates(pointA), this.vectorCoordinatesToCanvasCoordinates(pointB), lineSize, zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    queuePolygon(points, zIndex = 0, color = \"#FFFFFF\") {\r\n        const entry = new Canvas2DPolygonEntry(points.map(vector2D => this.vectorCoordinatesToCanvasCoordinates(vector2D)), zIndex, color);\r\n        this.addToDrawQueue(entry);\r\n    }\r\n    /**\r\n     * @description clears the canvas\r\n     */\r\n    clear() {\r\n        const context = this.context;\r\n        context.clearRect(0, 0, this.width, this.height);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Vector2D} vector2D a Vector2D in vector coordinates\r\n     * @returns modifed Vector2D in canvas coordinates\r\n     * @description converts the vector coordinate system ((0,0) being in the middle and y up) into\r\n     * canvas coordinates ((0,0) being top right and y down)\r\n     */\r\n    vectorCoordinatesToCanvasCoordinates(vector2D) {\r\n        let offsetVector = new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.width / 2, this.height / 2);\r\n        vector2D = vector2D.add(offsetVector);\r\n        return new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](vector2D.x, this.height - vector2D.y);\r\n    }\r\n    /**\r\n    *\r\n    * @param {Vector2D} vector2D a Vector2D in canvas coordinates\r\n    * @returns modifed Vector2D in vector coordinates\r\n    * @description converts the canvas coordinate system ((0,0) being in the top right and y down) into\r\n    * vector coordinates ((0,0) being middle and y up)\r\n    */\r\n    canvasCoordinatesToVectorCoordinates(coordinates) {\r\n        let offsetVector = new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.width / 2, this.height / 2);\r\n        coordinates = coordinates.sub(offsetVector);\r\n        return new _Vector2D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](coordinates.x, -coordinates.y);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/lib/Canvas2D.js?");

/***/ }),

/***/ "./src/js/lib/Random.js":
/*!******************************!*\
  !*** ./src/js/lib/Random.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Random\": () => (/* binding */ Random),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Random {\r\n    static randomInteger(min, max) {\r\n        if (min == null || max == null)\r\n            throw new Error(\"minimum or maximum must not be null\");\r\n        if (min > max)\r\n            throw new Error(\"minimum must not be larger than the maximum\");\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    static randomFloat(min, max) {\r\n        if (min == null || max == null)\r\n            throw new Error(\"minimum or maximum must not be null\");\r\n        if (min > max)\r\n            throw new Error(\"minimum must not be larger than the maximum\");\r\n        return (Math.random() * (max - min + Number.MIN_VALUE)) + min;\r\n    }\r\n    static randomBoolean() {\r\n        return this.randomChance(.5);\r\n    }\r\n    static randomChance(chance) {\r\n        if (chance > 1 || chance < 0)\r\n            throw new Error(`chance must be in the range [0,1] instead ${chance} was given`);\r\n        return Math.random() <= chance;\r\n    }\r\n    static randomArryIndexFromArray(arr) {\r\n        return this.randomInteger(0, arr.length);\r\n    }\r\n    static randomElementFromArray(arr) {\r\n        return arr[this.randomArryIndexFromArray(arr)];\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Random);\r\n\n\n//# sourceURL=webpack:///./src/js/lib/Random.js?");

/***/ }),

/***/ "./src/js/lib/Utility.js":
/*!*******************************!*\
  !*** ./src/js/lib/Utility.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Utility {\r\n    static clamp(num, min, max) {\r\n        return Math.min(max, Math.max(num, min));\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utility);\r\n\n\n//# sourceURL=webpack:///./src/js/lib/Utility.js?");

/***/ }),

/***/ "./src/js/lib/Vector2D.js":
/*!********************************!*\
  !*** ./src/js/lib/Vector2D.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector2D\": () => (/* binding */ Vector2D),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Vector2D {\r\n    x;\r\n    y;\r\n    /**\r\n     *\r\n     * @param {number} x a number representing the x coordinate of the vector\r\n     * @param {number} y a number representing the y coordinate of the vector\r\n     */\r\n    constructor(x, y) {\r\n        if (x == null || y == null)\r\n            throw new Error(\"arguements cannot be null\");\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * returns a vector of coordinate (0,0)\r\n     */\r\n    static get zero() {\r\n        return new Vector2D(0, 0);\r\n    }\r\n    /**\r\n     * returns the length of the vector\r\n     */\r\n    get length() {\r\n        return this.getLength();\r\n    }\r\n    /**\r\n     * returns the normalized vector\r\n     */\r\n    get normalized() {\r\n        return this.normalize();\r\n    }\r\n    /**\r\n     * @description returns the length of the vector\r\n     */\r\n    getLength() {\r\n        return Math.sqrt(this.x ** 2 + this.y ** 2);\r\n    }\r\n    /**\r\n     * @description returns a new normalized vector\r\n     */\r\n    normalize() {\r\n        let length = this.length;\r\n        return new Vector2D(this.x / length, this.y / length);\r\n    }\r\n    add(other) {\r\n        if (typeof other === \"number\") {\r\n            return new Vector2D(this.x + other, this.y + other);\r\n        }\r\n        else if (other instanceof Vector2D) {\r\n            return new Vector2D(this.x + other.x, this.y + other.y);\r\n        }\r\n        else\r\n            throw new TypeError(`cannot add Vector2D with ${other.constructor.name}`);\r\n    }\r\n    sub(other) {\r\n        if (typeof other === \"number\") {\r\n            return this.add(other * -1);\r\n        }\r\n        else if (other instanceof Vector2D) {\r\n            return this.add(other.scale(-1));\r\n        }\r\n        else\r\n            throw new TypeError(`cannot subtract Vector2D with ${other.constructor.name}`);\r\n    }\r\n    scale(other) {\r\n        if (typeof other === \"number\") {\r\n            return new Vector2D(this.x * other, this.y * other);\r\n        }\r\n        else if (other instanceof Vector2D) {\r\n            return new Vector2D(this.x * other.x, this.y * other.y);\r\n        }\r\n        else\r\n            throw new TypeError(`cannot scale Vector2D with ${other.constructor.name}`);\r\n    }\r\n    static getDistance(v0, v1) {\r\n        return v1.sub(v0).length;\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Vector2D);\r\n\n\n//# sourceURL=webpack:///./src/js/lib/Vector2D.js?");

/***/ }),

/***/ "./src/js/test.js":
/*!************************!*\
  !*** ./src/js/test.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Camera */ \"./src/js/Camera.js\");\n/* harmony import */ var _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/Vector2D */ \"./src/js/lib/Vector2D.js\");\n/* harmony import */ var _Simulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Simulation */ \"./src/js/Simulation.js\");\n\r\n\r\n\r\n//@ts-ignore\r\nwindow.Vector2D = _lib_Vector2D__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\r\n//@ts-ignore\r\nwindow.Simulation = _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\n//@ts-ignore\r\n_Camera__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(document.getElementById(\"canvas\"));\r\n//@ts-ignore\r\nwindow.Camera = _Camera__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\r\n//@ts-ignore\r\nwindow.data = _Simulation__WEBPACK_IMPORTED_MODULE_2__.SimulationDataCollector;\r\n_Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setUpSimulation();\r\n_Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].changeTargetTPS(1000);\r\nlet tps = document.getElementById(\"tps\");\r\nlet target = document.getElementById(\"target\");\r\nlet cycle = document.getElementById(\"cycle\");\r\nlet pop = document.getElementById(\"population\");\r\nlet average = document.getElementById(\"average\");\r\nsetInterval(() => {\r\n    tps.innerHTML = \"average tps for the last ten ticks: \" + _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].averageTPS.toFixed(0);\r\n    target.innerHTML = \"target tps: \" + _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].targetTPS;\r\n    cycle.innerHTML = `cycle: ${_Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].simulationTime.cycles}<br>ticks: ${_Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].simulationTime.ticks}`;\r\n    pop.innerHTML = \"population size: \" + _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].animals.length;\r\n    let out = \"\";\r\n    let traits = _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].animals[0].traits;\r\n    for (let trait in traits) {\r\n        out = `${out}average ${trait}: ${(_Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].animals.map(x => x.traits[trait]).reduce((a, b) => a + b) / _Simulation__WEBPACK_IMPORTED_MODULE_2__[\"default\"].animals.length).toFixed(2)}<br>`;\r\n    }\r\n    average.innerHTML = out;\r\n}, 1000 / 60);\r\ndocument.getElementById(\"downloadButton\").onclick = () => {\r\n    _Simulation__WEBPACK_IMPORTED_MODULE_2__.SimulationDataCollector.downloadData.bind(_Simulation__WEBPACK_IMPORTED_MODULE_2__.SimulationDataCollector)();\r\n};\r\n\n\n//# sourceURL=webpack:///./src/js/test.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/test.js");
/******/ 	
/******/ })()
;